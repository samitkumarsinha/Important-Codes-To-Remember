convert to observable
 let list = from([Movie_Dir_List])
 or
  let list = of(Movie_Dir_List)
  
//------------------forkjoin (left join)------------
 profile(): Observable<any>{
    let profile =this.http.get<any>(`${this.url}/api/profile`)
    let user = this.http.get<any>(`${this.url}/api/list`)
    let ret$ = forkJoin([profile, user])
    return ret$;
  }
 //----------------subscribe----------------------
     this.ds.profile().subscribe(resp => {
      let json1 = resp[0];
      let json2 = resp[1];
      let res = json2.map((x: { email: any; }) => Object.assign(x, json1.find((y: { email: any; }) => y.email == x.email)));

      console.log(res);
 //---------------------subscribe another way -------------------------------
  getJoin() {
    this.ds.getJoin().subscribe({
      next: (v) => console.log(v),
      error: (e) => console.error(e),
      complete: () => console.info('complete')
    });
  }
 //------------------right join-------------------
  let result = json1.map((x: any) => Object.assign(x, json2.find((y: any) => y.email == x.email)));

 //----------------------inner join common in both --------
  var result = json1.filter(function (o1: any) {
    return json2.some(function (o2: any) {
     return o1.email === o2.email ? Object.assign(o1, o2) : ''; // return the ones with equal id
    });
  });
 //-------------------only rec from 1st ob common in 2nd-----
  let result = json1.filter((o1:any) => json2.some((o2:any) => o1.email === o2.email));
      console.log(result)
 //----------------------exist in 2 not in 1---------------
  let result = json1.filter((o1:any) => !json2.some((o2:any) => o1.email === o2.email));
//-----------------------exist in 1 not in 2---------------
  let result = json2.filter((o1:any) => !json1.some((o2:any) => o1.email === o2.email));

--------------------------inner join with combinelatest------------------------------------
 getData() {
    return combineLatest([this.getMovies(), this.getMovieDirs()]).pipe(
      map(([movies, dirs]) =>
        movies.map((item) => {
          return {
            ...item,
            dir_id: dirs.find((a) => a.mov_id === item.mov_id),
          };
        })
      )
    );
  }
  ------------------------------------------------------------------------------------------------
 combine latest forkjoin with 3 sources // we can also use forkjoin
  getData() {
    return combineLatest([
      this.getMovies(),
      this.getMovieDirs(),
      this.getDir(),
    ]).pipe(
      map(([movies, dirs, dirsid]) => {
        let mov_1 = movies.map((item) => {
          return {
            ...item,
            dir_ids: dirs.find((a) => a.mov_id === item.mov_id),
          };
        });
        return mov_1.map((item: any) => {
          return{
            ...item,
            mov_detail: dirsid.find((a) => a.dir_id === item.dir_ids?.dir_id)
          }
        })
      })
    );
  }
  --------------------------------------------------------------------------------------------
  hostlistener 
  @HostListener ('click', ['$event']) hh(e: MouseEvent){
    console.log(e.clientX, e.clientY)
  }
  --------------------------------------------------------------------------------------------
  left join on two objects
  forkJoin([emp, details]).pipe(
      map(([_emp, _details]) =>
        _emp.map((item) => {
          return ( {
            ...item,
            details: _details.filter((item1) => item1.id === item.id)
          })
        })
      )
    ).subscribe(console.log)
    -----------------------------------------------------------------------------------------
