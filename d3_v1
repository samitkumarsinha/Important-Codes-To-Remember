bar chart
export class BarComponent implements OnInit {
  svg: any;
  data = [50, 8, 20, 4, 3];
  constructor() {}

  ngOnInit(): void {
    this.svg = d3.select('.bar').append('svg');
    this.svg
      .attr('width', 400)
      .attr('height', 400)
      .style('background-color', 'wheat');
    this.draw();
  }
  draw() {
    let x = d3
      .scaleLinear()
      .domain([d3.min(this.data) as number, d3.max(this.data) as number]) // This is what is written on the Axis: from 0 to 100
      .range([0, 400]);
    let y = d3
      .scaleLinear()
      .domain([d3.min(this.data) as number, d3.max(this.data) as number]) // This is what is written on the Axis: from 0 to 100
      .range([400, 0]);

    this.svg
      .append('g')
      .attr('transform', 'translate(0,400)')
      .call(d3.axisTop(x).ticks(5));

    this.svg
      .append('g')
      .call(d3.axisRight(y).ticks(5));

    this.svg
      .append('g')
      .attr('transform', 'translate(20,0)')
      .selectAll('div')
      .data(this.data)
      .enter()
      .append('rect')
      .style('fill','red')
      .attr('x',(d:any, i:any)=> i*30)
      .attr('y',(d:any, i:any)=> 400-d*8)
      .attr('width', 20)
      .attr('height', (d:any, i:any)=> 400)

  }
}
----------------------------------------------bar chart
export class ChartsComponent implements OnInit {
  svg: any;
  data: any;
  constructor() { }

  ngOnInit(): void {
    this.svg = d3.select('#chart');
    this.svg
      .attr('width', 800)
      .attr('height', 600)
      .style('background-color', '#FFFFFF')

    d3.json('assets/data.json').then(data => {
      this.data = data;
      this.draw();
    })

  }
  draw(){
    let yscale = d3.scaleLinear();
    yscale.range([600, 0]);
    let ymin: any = d3.min(this.data, (d: any,i: any)=> d.count);
    let ymax: any = d3.max(this.data, (d: any,i: any)=> d.count);
    console.log(ymin, ymax);
    yscale.domain([ymin-1, ymax]);

    let xscale = d3.scaleLinear();
    xscale.range([0, 800]);
    xscale.domain([0, this.data.length]);

    let ydomain: any = d3.extent(this.data, (d: any, i: any)=> d.count);
    let colorScale = d3.scaleLinear();
    colorScale.domain(ydomain);
    colorScale.range(['#00cc00' as any, '#0000FF' as any]);

    this.svg
      .selectAll('rect')
      .data(this.data)
      .enter()
      .append('rect')

      .attr('height', (d: any, i: any) => {
        return 600-yscale(d.count)
      })
      .attr('width', 800/this.data.length)
      .style('stroke','white')
      .style('stroke-width','1px')
      .attr('x', (d:any, i: any) => xscale(i))
      .attr('y', (d:any, i: any) => yscale(d.count))
      .attr('fill', (d:any, i: any) => colorScale(d.count))

      var leftAxis = d3.axisLeft(yscale);
      this.svg
      .append('g').attr('id', 'left-axis')
      .call(leftAxis);

      var skillScale = d3.scaleBand();
      var skillDomain = this.data.map((skill: any) =>{
        console.log(skill.name)
        return skill.name
      });
      skillScale.range([0, 800]);
      skillScale.domain(skillDomain);

      var bottomAxis = d3.axisBottom(skillScale);
      this.svg
      .append('g')
      .attr('id', 'bottom-axis') //not working
      .call(bottomAxis)
      .attr('transform', 'translate(0,'+600+')');
  }
  ----------------------------
