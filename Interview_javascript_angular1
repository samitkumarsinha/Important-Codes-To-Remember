1) what is interceptor
Interceptor is a special Angular Service that can be used to intercept all the request and response calls and modify them to our requirement.

import {Injectable} from "@angular/core";
import {HttpEvent, HttpHandler, HttpInterceptor,HttpRequest} from "@angular/common/http";
import {Observable} from "rxjs/Observable";
 
@Injectable()
export class AppHttpInterceptor implements HttpInterceptor {
    constructor() {
    }
 
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        console.log(req);
	req = req.clone({ headers: req.headers.set('Content-Type', 'application/json') });
        req = req.clone({ headers: req.headers.set('Authorization', 'Bearer ' + token) });

        return next.handle(req);
    }
}
 
app module
providers: [GitHubService,
    {
    provide: HTTP_INTERCEPTORS,
    useClass: AppHttpInterceptor,
    multi: true
  }



2) what is DOM
DOM is a programming interface for HTML and XML documents.
When the browser tries to render a HTML document, it creates an object based on the HTML document called DOM. Using this DOM, we can manipulate or change various elements inside the HTML document.

3) what is box css
A rectangle box is wrapped around every HTML element. The box model is used to determine the height and width of the rectangular box. The CSS Box consists of Width and height (or in the absence of that, default values and the content inside), padding, borders, margin.

4) what is hoisting
Hoisting is a default behaviour of javascript where all the variable and function declarations are moved on top.
variable initialization are not hoisted, only declaration are hoisted

5) what is closure
Closures is an ability of a function to remember the variables and functions that are declared in its outer scope.
This ability of a function to store a variable for further reference even after it is executed, is called Closure.

6) what is component and module
In Angular, components are the basic building blocks, which control a part of the UI for any application.
A component is defined using the @Component decorator. Every component consists of three parts, the template which loads the view for the component, a stylesheet which defines the look and feel for the component, and a class that contains the business logic for the component.

A module is a place where we can group components, directives, services, and pipes. Module decides whether the components, directives, etc can be used by other modules, by exporting or hiding these elements. Every module is defined with a @NgModule decorator.
By default, modules are of two types:

Root Module
Feature Module
Every application can have only one root module whereas, it can have one or more feature modules.
A root module imports BrowserModule, whereas a feature module imports CommonModule.

7) explain architecture of angular and how execute the angular application

architecture:
The Eight main building blocks of an Angular application:
Modules
Components
Templates
Metadata
Data binding
Directives
Services
Dependency injection

https://v2.angular.io/docs/ts/latest/guide/architecture.html#!#services
-----------------------------------------------------------------------
configuration file angular.json => entry point main: src/main.ts => 
The main.ts file creates a browser environment for the application to run,  AppModule is getting bootstrapped
platformBrowserDynamic().bootstrapModule(AppModule)

app.module.ts => bootstrap: [AppComponent]

after that angular calls index.html that calls root component app-root

8) angular life cycle hooks

ngOnChanges( ) This hook/method is called before ngOnInit and whenever one or more input properties of the component changes.
This method/hook receives a SimpleChanges object which contains the previous and current values of the property.

ngOnInit( ) This hook gets called once, after the ngOnChanges hook.
It initializes the component and sets the input properties of the component.

ngDoCheck( ) It gets called after ngOnChanges and ngOnInit and is used to detect and act on changes that cannot be detected by Angular.
We can implement our change detection algorithm in this hook. 

ngAfterContentInit( ) It gets called after the first ngDoCheck hook. This hook responds after the content gets projected inside the component.

ngAfterContentChecked( ) It gets called after ngAfterContentInit and every subsequent ngDoCheck. It responds after the projected content is checked.

ngAfterViewInit( ) It responds after a component's view, or a child component's view is initialized.

ngAfterViewChecked( ) It gets called after ngAfterViewInit, and it responds after the component's view, or the child component's view is checked.

ngOnDestroy( ) It gets called just before Angular destroys the component. This hook can be used to clean up the code and detach event handlers.

9)  what is reactive and template form when we use 
Reactive forms are forms where we define the structure of the form  with Form Groups, Form Controls, and Form Arrays. We also define the validation rules in the component class. Then, we bind it to the HTML form in the template.

Template-driven forms use two-way data binding to update the data model in the component as changes are made in the template and vice versa

10) what is pipe,directives
Pipes are for formatting data, and directives are to alter the behavior/appearance of an element.

13) how to declare variable in scss
$font-color: #fff;
$bg-color: #00f;

#box{
	color: $font-color;
	background: $bg-color;
}

SASS same but without curly brace
LESS use @ and {}


15) what is spread operator and rest operator (...)
Using the rest parameter syntax, we can create functions that can take a variable number of arguments.
Any number of arguments will be converted into an array using the rest parameter.
Rest parameter should always be used at the last parameter of a function:

spread operator is used to spread an array, and object literals. We also use spread operators where one or more arguments are expected in a function call.


16) what is promise and observable and it differences
Emits a single value/	Emits multiple values over a period of time
Not Lazy/ Lazy. An observable is not called until we subscribe to the observable
Cannot be cancelled/ Can be cancelled by using the unsubscribe() method
Observable provides operators like map, forEach, filter, reduce, retry, retryWhen etc.

17) what is lazy loading
Modules in Angular can be lazy-loaded which means that they are loaded when needed, not always! Lazy loading significantly improves the performance of an Angular app.
loadchildren: ()=>import('module').then(m => m.module)

18) what is flex
The Flexible Box Layout Module, makes it easier to design flexible responsive layout structure without using float or positioning.
display: flex
flex-direction: row, column
flex-wrap: wrap, nowrap, wrap-reverse
justify-content: center, flex-start/end
align-items
align-content

19) what are the type of position and it's purpose
absolute : exact position where we want to place
relative: relative to itself
fixed: element is positioned relative to the viewport or the browser window itself. viewport doesn't change if you scroll and hence the fixed element will stay right in the same position. 
static: static is to forcefully remove some positioning that got applied to an element outside of your control.
sticky: hybrid of relative and fixed

20)what are the data type in java script (typeof)

primitive: string, number, boolean, null, undefined, symbol
nom-primitive: object, array 


21) advantage of angular
Angular provides a number of features like,routing, state management, rxjs library and http services
Angular uses HTML to render the UI of an application. HTML is much easier to use than JavaScript.
Long-term Google support

22) what are the scripting framework
vue, ember, svelte, meteor, aurelia
For applications that use complex logic, developers had to put in extra effort to maintain separation of concerns for the app.
so client-side frameworks like Angular came into the picture, which made life easier for the developers by handling separation of concerns and dividing code into smaller bits of information.
Client-side frameworks allow one to develop advanced web applications like Single-Page-Application
23)how to bind the data and it's type
Data binding is a process that creates a connection between the applicationâ€™s UI and the data
one way interpolation
two way ngmodel

property binding is done using "[ ]" attribute and event binding is done using "( )" attribute.
attribute binding : 
img [src] = ''
input [value]=''
Class Binding: 
<p [class]="myCSSClass">
Style bindiing:
<p [style.color]="myColor">

24)difference between javascript and typescript
ts is superset of js
TypeScript is known as an Object-oriented programming language whereas JavaScript is a scripting language
TypeScript has a feature known as Static typing but JavaScript does not support this feature. (variable types are explicitly declared and thus are determined at compile time)
TypeScript supports Interfaces but JavaScript does not

25) what is routegaurd and its purpose
https://codecraft.tv/courses/angular/routing/router-guards/

Angular's route guards are interfaces which can tell the router whether or not it should allow navigation to a requested route. They make this decision by looking for a true or false return value from a class which implements the given guard interface
used to protect the routes from unauthorized access.
CanActivate
Checks to see if a user can visit a route.

CanActivateChild
Checks to see if a user can visit a routes children.

CanDeactivate
Checks to see if a user can exit a route.

Resolve
Performs route data retrieval before route activation.

CanLoad
Checks to see if a user can route to a module that lazy loaded.

-------------------
import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';
import { AuthService } from './auth.service';

export class AuthGuard implements CanActivate {
  constructor(private auth: AuthService){}
  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {
      const isauthorized = this.auth.user.role.includes(route.data.role) 
      if(!isauthorized){
        alert('unauthorized')
      }
      return isauthorized;
  }
}
----------------------------------------
export class AuthService {
  user!: User;
  constructor(private ds: DataService, private router: Router) { 
    this.user = this.getUser(this.token)
  }
  get token(){
    return localStorage.getItem('token')
  }
  login(data: User){
    console.log(data)
    this.ds.login(data).subscribe(item => {
      console.log(item.token)
      localStorage.setItem('token', item.token)
      this.user = this.getUser(this.token)
      console.log(this.user)
      if(!this.user){
        alert("Nok")
      }else{
        this.router.navigate(['dashboard'])
      }
    })
  }
  getUser(token: any): User{
    const payload = atob(token.split('.')[1])
    let userdetail:User = JSON.parse(payload).payloaddata
    console.log(userdetail)
    return userdetail;
  }
----------------------------------------
route
{path: 'list', component: ListComponent, canActivate: [AuthGuard], data: {role:'admin'}}

26) Grid Layout
CSS Grid Layout is the most powerful layout system available in CSS. It is a 2-dimensional system, meaning it can handle both columns and rows, unlike flexbox which is largely a 1-dimensional system

