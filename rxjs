mouse event
@ViewChild('mydiv') mydiv!: ElementRef;
@ViewChild('t1') t1!: ElementRef;

ngAfterViewInit(): void {
    fromEvent(document.body, 'click')
      .pipe(
        debounceTime(10),
        map((item: any) => {
          return { x: item.clientX, y: item.clientY };
        })
      )
      .subscribe((c) => {
        console.log(c);
      });
  }
  --------------------------------------------
  text blur event
  
   fromEvent(this.t1.nativeElement, 'blur')
      .pipe(
        map((item: any) => {
          return item.target.value
        })
      ).subscribe(console.log)
      
  <input type="text" #t1>
  --------------------------------------------
  area of rectangle using combinelatest two text
  
      let t11 = fromEvent(this.t1.nativeElement, 'blur').pipe(map((item: any) => item.target.value))
      let t22 = fromEvent(this.t2.nativeElement, 'blur').pipe(map((item: any) => item.target.value))
      combineLatest([t11,t22]).subscribe(([t1,t2]) => console.log(t1*t2))
  --------------------------------------------
  map two arrays
   getData() {
    let bear = [{name: 'aa', age:20}, {name: 'bb', age:20}, {name: 'cc', age:20}, {name: 'dd', age:20}]
    let lion = [{name: 'ee', age:20}, {name: 'ff', age:20}, {name: 'gg', age:20}]
    let list3 = of(bear)
    let list4 = of(lion)
    return combineLatest([list3, list4]).pipe(
      map(([bears, lions]) => {
        return bears.map((tag, index) => {
          return 'bear called ' + tag.name + ' lion called ' + (lions[index]?.name)
        })
      })
    )
    -----------------------------------------------
        pair with zip, shortcut to above
     return zip([bear, lion]).pipe(
      map(item => console.log('lion is ' + item[0].name + ' bear called '+item[1].name))
    )
   
    -----------------------------------------------
    extract inner observables
 let list5 = of(1, 2, 3);
    let list6 = of(1, 2);
    return list5.pipe(
      switchMap((item) => {
        return list6.pipe(map((innerValue) => item * innerValue));
      })
    );
    -----------------------------------------------
 let list1 = of(1, 2);
    let list2 = of('A', 'B');
    return list1.pipe(
      concatMap((list1Value) => {
        return list2.pipe(map((list2Value) => list1Value + list2Value));
      })
    );
    -------------------------------------------------
    let list5 = of(1,2,3,4)
    let list6 = of('A','B','C','D')
     return list5.pipe(
      switchMap((item) => {
        return list6.pipe(map((item1)=> item+item1))
      })
    )
    --------------------------------------------------
    mergemap with object
        let list1 = of({ name: 'hound' }, { name: 'mastiff' });
      return list1.pipe(
      mergeMap((item: any) => {
        return this.http.get<any>(
          'https://dog.ceo/api/breed/' + item.name + '/list'
        );
      })
    );
    ------------------------------------------------------
    flattening with mergeall
     return list1.pipe(
      map((item: any) => {
        return this.http.get<any>(
          'https://dog.ceo/api/breed/' + item.name + '/list'
        );
      }),
      mergeAll()
    );
    ---------------------------------------------------------
    on object
     let list7 = this.http.get<any>('https://jsonplaceholder.typicode.com/users')
    return list7.pipe(
      mergeMap((item: any) => {
        return item.map((item: any) => item.id)
      }),
    )
    ---------------------------------------------------------------
    with json array
 return list3.pipe(
      mergeMap((item: any) => {
        let inner = item.map((item: any) => item)
        return list4.pipe(map((item: any)=> {
          return {item, inner}
        }))
      })
    )
    ----------------------------------------------------------------
 use mergeAll with of (use from with json object)
of([2, 3, 4]).pipe(
  mergeAll()
).subscribe(v => console.log(v));
// outputs 2, 3, 4
If you use from it will work too:

from([2, 3, 4])
  .subscribe(v => console.log(v));
// outputs 2, 3, 4
------------------------------------------------------------------------
switchmap
 fromEvent(window,'click').pipe(
        switchMap(item => interval(500))
      ).subscribe(console.log)
------------------------------------------------------------------------
fromEvent(window, 'scroll').pipe(
      map((item) => console.log(item))).subscribe(console.log);

-------------------------------------------------------------------------
    fromEvent(document.body, 'click')
      .pipe(
        debounceTime(10),
        map((item: any) => {
          return { x: item.clientX, y: item.clientY };
        })
      ).subscribe(console.log)
      let ob2 = of(1,6, 9)
      combineLatest([ob1, ob2]).subscribe(console.log)
  -------------------------------------------------------------------------
switchmap used in subscribing to url by passing arguments from query param, each time new observable created, cancelling previous subscription
 this.route.queryParams.pipe(
        switchMap((item: Params) => {
          return this.ds.getData(item['id'])
        })
      ).subscribe(console.log)
      --------------------------------------------------------------------------
      get value from textbox
       fromEvent(this.t1.nativeElement, 'keyup')
      .pipe(
        switchMap((item: any) => {
          return item.target.value === ''
            ? ''
            : this.ds.getData(item.target.value);
        })
      )
      .subscribe(console.log);
      ------------------------
      in service pass id as parameter
      return this.http.get<any>('https://jsonplaceholder.typicode.com/posts/' + id)
      --------------------------------------------------------------------------
with reactive form textbox
  this.myform.get('txt1')?.valueChanges.pipe(
      switchMap((item: any) => {
        return item === '' ? '' : this.ds.getData(item)
      })
    ).subscribe(console.log)
    ----------------------------------------------------------------------------
    mergemap with forkjoin
     let list3 = from([
      { id: 1, name: 'hound' },
      { id: 2, name: 'mastiff' },
    ]);
     return list3.pipe(
      mergeMap((item) => {
        let url1$ = this.http.get('https://dog.ceo/api/breed/' + item.name + '/list')
        let url2$ = this.http.get('https://dog.ceo/api/breed/' + item.name + '/images/random')
        return forkJoin([url1$, url2$])
      })
    )
    ---------------------------------------------------------------------------------
    produce stream with timeinterval with delay
      return list5.pipe(
      concatMap(item => {
        return of(item).pipe(delay(1000));
      })
    )
    -----------------------------------------------------------------------------------
    show id based records with delay
     const api = (id: any) => this.http.get(`https://jsonplaceholder.typicode.com/todos/${id}`)
    return of(1, 2, 3, 4, 5).pipe(concatMap((id) => from(api(id)).pipe(delay(1000))));
  -----------------------------------------------------------------------------------------
  get items by id
   let list7 = this.http.get<any[]>(
      'https://jsonplaceholder.typicode.com/users'
    );
    
     const obs = of(1, 2, 3, 4, 5, 6);
    return obs.pipe(
      mergeMap((item: any) => {
        return list7.pipe(
          map((item1: any) => {
            return item1.find((items: any) => {
              return items.id === item
            })
          })
        )
      })
    )
    ----------------------------------------------------------------------------------------
use filter on above
 return obs.pipe(
      mergeMap((item: any) => {
        return list7.pipe(
          map((item1: any) => {
            return item1.find((items: any) => {
              return items.id === item
            })
          }),
          filter((item: any) => item.id > 4)
        )
      })
    )
    --------------------------------------------------------------------------------------------
concatall/mergeall
      return of(list5, list6).pipe(map((item) => item)).pipe(mergeAll())
      
  -----------------------------------------------------------------------------------------------
  left join on two objects
   let emp = of([
      { id: 1, name: 'aa', age: 20 },
      { id: 2, name: 'bb', age: 21 },
      { id: 3, name: 'cc', age: 22 },
      { id: 4, name: 'dd', age: 23 }
    ]);
    let details = of([
      { id: 1, address: 'ee'},
      { id: 1, address: 'ff' },
      { id: 2, address: 'gg' },
      { id: 2, address: 'hh' }
    ]);
  forkJoin([emp, details]).pipe(
      map(([_emp, _details]) =>
        _emp.map((item) => {
          return ( {
            ...item,
            details: _details.filter((item1) => item1.id === item.id)
          })
        })
      )
    ).subscribe(console.log)
    --------------------------------------------------------------------------------------------------
