mouse event
@ViewChild('mydiv') mydiv!: ElementRef;
@ViewChild('t1') t1!: ElementRef;

ngAfterViewInit(): void {
    fromEvent(document.body, 'click')
      .pipe(
        debounceTime(10),
        map((item: any) => {
          return { x: item.clientX, y: item.clientY };
        })
      )
      .subscribe((c) => {
        console.log(c);
      });
  }
  --------------------------------------------
  text blur event
  
   fromEvent(this.t1.nativeElement, 'blur')
      .pipe(
        map((item: any) => {
          return item.target.value
        })
      ).subscribe(console.log)
      
  <input type="text" #t1>
  --------------------------------------------
  area of rectangle using combinelatest two text
  
      let t11 = fromEvent(this.t1.nativeElement, 'blur').pipe(map((item: any) => item.target.value))
      let t22 = fromEvent(this.t2.nativeElement, 'blur').pipe(map((item: any) => item.target.value))
      combineLatest([t11,t22]).subscribe(([t1,t2]) => console.log(t1*t2))
  --------------------------------------------
  map two arrays
   getData() {
    let bear = [{name: 'aa', age:20}, {name: 'bb', age:20}, {name: 'cc', age:20}, {name: 'dd', age:20}]
    let lion = [{name: 'ee', age:20}, {name: 'ff', age:20}, {name: 'gg', age:20}]
    let list3 = of(bear)
    let list4 = of(lion)
    return combineLatest([list3, list4]).pipe(
      map(([bears, lions]) => {
        return bears.map((tag, index) => {
          return 'bear called ' + tag.name + ' lion called ' + (lions[index]?.name)
        })
      })
    )
    -----------------------------------------------
        pair with zip, shortcut to above
     return zip([bear, lion]).pipe(
      map(item => console.log('lion is ' + item[0].name + ' bear called '+item[1].name))
    )
   
    -----------------------------------------------
    extract inner observables
 let list5 = of(1, 2, 3);
    let list6 = of(1, 2);
    return list5.pipe(
      switchMap((item) => {
        return list6.pipe(map((innerValue) => item * innerValue));
      })
    );
    -----------------------------------------------
 let list1 = of(1, 2);
    let list2 = of('A', 'B');
    return list1.pipe(
      concatMap((list1Value) => {
        return list2.pipe(map((list2Value) => list1Value + list2Value));
      })
    );
    -------------------------------------------------
    let list5 = of(1,2,3,4)
    let list6 = of('A','B','C','D')
     return list5.pipe(
      switchMap((item) => {
        return list6.pipe(map((item1)=> item+item1))
      })
    )
    --------------------------------------------------
    mergemap with object
        let list1 = of({ name: 'hound' }, { name: 'mastiff' });
      return list1.pipe(
      mergeMap((item: any) => {
        return this.http.get<any>(
          'https://dog.ceo/api/breed/' + item.name + '/list'
        );
      })
    );
    ------------------------------------------------------
    flattening with mergeall
     return list1.pipe(
      map((item: any) => {
        return this.http.get<any>(
          'https://dog.ceo/api/breed/' + item.name + '/list'
        );
      }),
      mergeAll()
    );
    ---------------------------------------------------------
    on object
     let list7 = this.http.get<any>('https://jsonplaceholder.typicode.com/users')
    return list7.pipe(
      mergeMap((item: any) => {
        return item.map((item: any) => item.id)
      }),
    )
    ---------------------------------------------------------------
    with json array
 return list3.pipe(
      mergeMap((item: any) => {
        let inner = item.map((item: any) => item)
        return list4.pipe(map((item: any)=> {
          return {item, inner}
        }))
      })
    )
    ----------------------------------------------------------------
 use mergeAll with of (use from with json object)
of([2, 3, 4]).pipe(
  mergeAll()
).subscribe(v => console.log(v));
// outputs 2, 3, 4
If you use from it will work too:

from([2, 3, 4])
  .subscribe(v => console.log(v));
// outputs 2, 3, 4
------------------------------------------------------------------------
