line chart
-----------
export class BarComponent implements OnInit {
  svg: any;
  height = 400;
  width = 500;
  data: any[] = [];
  constructor() {}

  async ngOnInit(): Promise<void> {
    await d3.json('assets/data.json').then((data: any) => {
      this.data = data;
    });
    this.svg = d3.select('.chart').append('svg');
    this.svg
      .attr('width', this.width)
      .attr('height',this.height)
      .style('margin','40px')
      .style('overflow','visible')
      .style('background-color', 'lightgray');
    let xscale: any = d3.scalePoint().domain(this.data.map((d: any) => d.name)).range([0, this.width]);
    let xaxis = d3.axisBottom(xscale).tickSize(-400);

    let yscale = d3.scaleLinear().domain([0,d3.max(this.data, (d: any) => d.count)]).rangeRound([this.height, 0]).nice();
    let yaxis = d3.axisLeft(yscale).tickSize(-500);

    this.svg
      .append('g')
      .attr('transform','translate(0, ' + this.height + ')')
      .attr('class','axis-grid')
      .call(xaxis)
      .selectAll("text")
      .style("text-anchor", "end")
      .attr("dx", "-.8em")
      .attr("dy", ".15em")
      .attr("transform", "rotate(-90)");

    this.svg
      .append('g')
      .attr('class', 'y-grid')
      .call(yaxis)

    let line = d3
      .line()
      .x((d: any) => xscale(d.name))
      .y((d: any) => yscale(d.count))

    this.svg
      .append('path')
      .data([this.data])
      .attr('class', 'line')
      .attr('d', line)
      .style('fill', 'none')
      .style('stroke', 'green');

  }
}
--------------------
with gridline color
export class BarComponent implements OnInit {
  svg: any;
  height = 400;
  width = 500;
  data: any[] = [];
  constructor() {}

  async ngOnInit(): Promise<void> {
    await d3.json('assets/data.json').then((data: any) => {
      this.data = data;
    });
    this.svg = d3.select('.chart').append('svg');
    this.svg
      .attr('width', this.width)
      .attr('height',this.height)
      .style('margin','40px')
      .style('overflow','visible')
      .style('background-color', 'white');
    let xscale: any = d3.scalePoint().domain(this.data.map((d: any) => d.name)).range([0, this.width]);
    let xaxis = d3.axisBottom(xscale).tickSize(-400);

    let yscale = d3.scaleLinear().domain([0,d3.max(this.data, (d: any) => d.count)]).rangeRound([this.height, 0]).nice();
    let yaxis = d3.axisLeft(yscale).tickSize(-500);

    this.svg
      .append('g')
      .attr('transform','translate(0, ' + this.height + ')')
      .attr('class','axis-grid')
      .call(xaxis)
      .call((g:any) => g.selectAll(".tick:first-of-type line")
      .attr("class", "axis_bar")
      .attr("stroke", "black"))
      .call((g:any) => g.selectAll(".tick:not(:first-of-type) line")
      .attr("class", "axis_tick")
      .style("stroke", "lightgray"))
    this.svg
      .selectAll("text")
      .style("text-anchor", "end")
      .attr("dx", "-.8em")
      .attr("dy", ".15em")
      .attr("transform", "rotate(-90)");

    this.svg
      .append('g')
      .attr('class', 'y-grid')
      .call(yaxis)
      .call((g:any) => g.selectAll(".tick:first-of-type line")
      .attr("class", "axis_bar")
      .attr("stroke", "black"))
      .call((g:any) => g.selectAll(".tick:not(:first-of-type) line")
      .attr("class", "axis_tick")
      .attr("stroke", "lightgrey"))

    let line = d3
      .line()
      .x((d: any) => xscale(d.name))
      .y((d: any) => yscale(d.count))

    this.svg
      .append('path')
      .data([this.data])
      .attr('class', 'line')
      .attr('d', line)
      .style('fill', 'none')
      .style('stroke', 'green');

  }
}
--------------------------------------
format tick and set tick count
let yscale = d3.scaleLinear().domain([0,35]).rangeRound([this.height, 0]).nice();
let yaxis = d3.axisLeft(yscale).tickSize(-500).ticks(35).tickFormat(d3.format('d'));
---------------------------------------
 left padding in chart
     const xscale: any = d3.scaleBand().domain(this.data.map((d: any) => d.name)).range([0, parseInt(this.config.width)]).padding(1);
-----------------------------------------
