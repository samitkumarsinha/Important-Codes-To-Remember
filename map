Angular extract specific fields from json in service
 customlist(): Observable<CustomUser[]>{
    return this.http.get<User[]>(`${this.url}/api/list`).pipe(
       map((obj:User[]) => {
          let result = obj.map((data: CustomUser) => {
            return ({'username': data.username, 'password': data.password})
          })
          return result;
       })
    )
  }
  //--------in short
  map((obj:User[]) => {
    return obj.map(data => ({'username': data.username, 'password': data.password})) 
  })
  //--------depth one level et company from https://jsonplaceholder.typicode.com/users
  companydata(): Observable<MyList[]>{
    return this.http.get<any>('https://jsonplaceholder.typicode.com/users').pipe(
      map((obj:any)=>{
        console.log(obj)
        return obj.map(
          (data1:any) => {
            let mydata:MyList = data1.company;
            return ({'name': mydata.name,'catchPhrase': mydata.catchPhrase, 'bs': mydata.bs})
          }
        )
      })
    )}
-----------------------------------------------------------------------------
SwitchMap: get data from two sources
  getUser(): Observable<User>{
    return this.http.get<any>(`${this.baseUrl}/users`);
  }
  getDetails(): Observable<any> {
    return this.http.get<any>(`${this.baseUrl}/unknown`).pipe(
      switchMap((val) => this.getUser().pipe(
        map(data => [val, data])
      )
      )
    );
  }
  //-----------------fetch---------------------------------------------------
   getDetails(){
    this.ds.getDetails().subscribe(data => {
      console.log(data[0].data, data[1].data);
    })
  }
  -----------------------------------------------------------------------------
  
  data.service.ts (get records from two api
  
  getDetails(): Observable<any> {
    return this.http.get<any>(`${this.baseUrl}/users/1`).pipe(
      switchMap((rec1) => {
        return this.http
          .get<any>(`${this.baseUrl}/unknown/${rec1.data.id}`)
          .pipe(
            map((rec2) => {
              console.log(rec1.data);
              return Object.assign(rec1.data, rec2.data);
            })
          );
      })
    );
  }
  -------------------------------------------------------------------------------------------------------use this for map fields with interface
 map final code
 interface
 user.ts
 -----------------------------------------------------
 export interface User {
  id: number,
  email: string,
  first_name: string,
  last_name: string,
  avatar: string
}
---------------------------------------------------------
dataservice
data.service.ts
import { Injectable } from '@angular/core';
import { HttpClient} from '@angular/common/http';
import { User } from './user';
import { Observable } from 'rxjs/internal/Observable';
import { map } from 'rxjs';
@Injectable({
  providedIn: 'root'
})
export class DataService {
  constructor(private http: HttpClient) { }
  getData(): Observable<any>{
    return this.http.get<any>('https://reqres.in/api/users').pipe(map(item =>
      item.data as User[]
    ))
  }
}

or using curly bracket and return statement
---------------------------------------------------------------------------------------------------
  getData(): Observable<any>{
    return this.http.get<any>('https://reqres.in/api/users').pipe(map(item =>{
      return item.data as User[]
  }))
  }
--------------------------------------------------------------------------------------------------
inner join with combinelatest
 getData() {
    return combineLatest([this.getMovies(), this.getMovieDirs()]).pipe(
      map(([movies, dirs]) =>
        movies.map((item) => {
          return {
            ...item,
            dir_id: dirs.find((a) => a.mov_id === item.mov_id),
          };
        })
      )
    );
  }
  ---------------------------------------------------------------------------------------------------
  select fields in ts using map
   getData() {
    this.ds.getData().subscribe((item: any) => {
      console.log(item.data)
    });
  }
  -----------------------------------------------------------------------------------------------------
